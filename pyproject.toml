[project]
name = "pyprojectx"
version = "1.0.0.dev"
description = "Execute scripts from pyproject.toml, installing tools on-the-fly"
license = { text = "MIT" }
authors = [{ name = "Houbie", email = "ivo@houbrechts-it.be" }]
readme = "README.md"
urls = { homepage = "https://github.com/pyprojectx/pyprojectx", documentation = "https://pyprojectx.github.io" }

keywords = ["build", "dependency", "pyprojectx"]
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.8"

dependencies = [
    "userpath==1.9.1",
    "virtualenv==20.24.6",
    "tomlkit>=0.12.3",
]

[tool.pdm.build]
buildlocked = true
[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.4.3",
    "pytest-mock>=3.12.0",
]

[project.scripts]
pyprojectx = "pyprojectx.cli:main"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
select = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "ICN", "INP", "ISC", "NPY", "PD", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "ICN", "INP", "ISC", "NPY", "PD", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
ignore = ["D100", "D102", "D103", "D104", "D105", "D213", "D203", "T201", "TRY003", "EM102", "COM812", "S602", "S603", "S604", "S605", "S607", "S324"]
[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "I001", "INP001"]

[tool.pyprojectx]
[tool.pyprojectx.main]
requirements = [
    "pdm",
    "ruff",
    "pre-commit==3.5.0",
    "px-utils",
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "markdown-include"
]
post-install = "pdm plugin add pdm-buildlocked && pre-commit install"

[tool.pyprojectx.aliases]
install = "pdm install"
run = "pdm run pyprojectx -t pyproject.toml "
update = "pdm update"
outdated = "pdm update --outdated"
clean = "pxrm .venv .pytest_cache dist .pdm-build .ruff_cache"
full-clean = ["@clean", "pxrm .pyprojectx"]
ruff = "ruff src tests --fix"
unit-test = "pdm run pytest tests/unit"
integration-test = "pdm run pytest tests/integration"
test = [
    "@unit-test",
    "@integration-test"
]
check-ruff = "ruff src tests"
check = [
    "@check-ruff",
    "@test"
]
build = [
    "pw@install",
    "pw@check",
    "pw@pdm build"
]

# used in github actions:
publish = "pdm publish --username __token__"
prep-release = """\
# cleanup
rm -f wrappers.zip .changelog.md
# extract version from tag
RELEASE_VERSION="${GITHUB_REF_NAME}"
# replace __version__ in wrapper
sed -i -e "s/__version__/${RELEASE_VERSION}/g" src/pyprojectx/wrapper/pw.py
sed -i -e "s/1.0.0.dev/${RELEASE_VERSION}/g" pyproject.toml
# cleanup sed backup
rm -r src/pyprojectx/wrapper/pw.py?*
rm -r pyproject.toml?*
mkdir -p dist-zip
cp src/pyprojectx/wrapper/pw.py dist-zip/pw
cp src/pyprojectx/wrapper/pw.bat dist-zip/pw.bat
zip -j wrappers.zip dist-zip/pw*
awk '/-{3,}/{flag=1;next}/Release/{if (flag==1)exit}flag' CHANGELOG.md > .changelog.md
"""

generate-usage = "./pw --help > docs/docs/usage.txt"
serve-docs = { cmd = "mkdocs serve", cwd = "docs" }
generate-docs = { cmd = "@generate-usage && mkdocs build", cwd = "docs" }
deploy-docs = { cmd = "mkdocs gh-deploy", cwd = "docs" }
